* { box-sizing: border-box; }

:root {
  --controls-width: 300px;
  --content-width:  calc(100vw - var(--controls-width));
}

body {
  max-width: 100vw;
  height: 100vh;
  margin: 0;

  /*
  display: grid;
  grid-template-columns: [controls] var(--controls-width) [pages] auto;
  grid-template-rows:    [controls pages] auto;
  */

  font-family: Sans-Serif;

  background: #bbb;
  background: linear-gradient(#bbb, #999);
  background-attachment: fixed;
}

.hidden {
  display: none !important;
  opacity: 0 !important;
}

.scroll {
    overflow-y: scroll;
    height: 100%;
    max-height: 100vh;
}

.controls {
    position: fixed;
    min-height: 100vh;
    width: var(--controls-width);
    top: 0;
    left: 0;
    bottom: 0;

    background:    #eee;
    padding:       1em;

    box-shadow: #0004 3px 0px 5px;
    z-index: 1;
    border-radius: 2px;
    line-height: 1.75em;
}

#main-content {
  position: relative;
  top: 0;
  bottom: 0;
  min-height: 100vh;
  width: calc(100% - var(--controls-width));
  left: var(--controls-width);
} 

#main-content > * {
  position: absolute;
  top: 0; bottom: 0; left: 0; right: 0;
}

input[type="checkbox"],
input[type="checkbox"] + label {
  font-size: 0.8em;
  vertical-align: middle;
}

input[type="file"] {
  word-wrap: break-word;
  max-width: 100%;
}

input.crease-margin {
  direction: rtl;
  text-align: right;
  padding-right: 40px;
  width: 100%;
}

input#crease-margin+span {
  margin-left: -45px;
}

input[disabled]+label {
  color: #aaa;
}

ol.pages-list {
  border: 1px solid #444;
  border-radius: 3px;
  background: white;
  height: 200px;
  width: 100%;
  overflow: scroll;
}

ol.pages-list li:nth-child(even) {
  background: #f4f4ff;
}

ol.pages-list li {
  /*
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: end;
  padding: 0 4px;
  */

  margin: none;
  color: #888;
}

ol.pages-list li > button {
  background: none;
  border: none;
  text-align: left;
  flex-grow: 1;
  font-size: 1em;
}

ol.pages-list li[data-name=""] > button {
  font-style: italic;
  color: #888;
}

ol.pages-list li.selected {
  background: #44f;
  color: white;
}

body > #main-content {
  grid-area: pages;
}

.spinner-ring {
  width: 6em;
  height: 6em;

  /*
	Prevent varying border widths don't change the size of this element. If the
    height and widths are unequal, the spin animation will be lopsided.
  */
  box-sizing: border-box;
  
  /*
	Define the visual style of the spinner, a thin, grey, glowing ring where a
    quarter of it is thicker and blue. The use of vmin units makes the border
    widths scale in proportion to screen side.

    TODO: calculate these values from custom properties so .loading-spinner instances can be locally themed
  */
  border-radius: 50%;
  border: 0.5vmin #ccc solid;
  border-top: 1vmin blue solid;
  box-shadow: 0 0 1vmin 0vmin #fff6, 0 0 1vmin 0vmin #fff6 inset;

  animation: spin 1s infinite ease;
}

@keyframes spin {
  to { transform: rotate(360deg) }
}

.layer {
  position: absolute;
  top: 0; right: 0; bottom: 0; left: 0;
}

.layer#modal-container {
  background: #0003;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 100;
}

.modal {
  display: flex;
  flex-direction: column;
  align-items: stretch;
  box-shadow: 2px 0 5px 2px #4448;
}

form.modal .modal-main {
  display: flex;
  flex-direction: column;
  gap: 0.25em;
}

form.modal label {
  display: flex;
  flex-flow: row wrap;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 0.5em;
}

form.modal label > input[type="checkbox"] {

}

.modal header {
  display: flex;
  flex-direction: row;
  justify-items: space-between;
  align-items: center;
  border-bottom: 1px solid #ccc;
  margin-bottom: 1em;
  padding-bottom: 1em;
}

.modal input[type=text],input[type=number] {
  padding: 6px;
}

.modal-close {
  justify-self: end;
}

.modal .modal-main {
  flex-grow: 1;
}

.modal > footer {
  display: flex;
  flex-direction: row;
  justify-content: end;
  align-items: center;
  gap: 16px;
}

/*
  Modal footer items with the class .left are moved to the left side of the
  footer. Do this by adding a leftward margin to the first non-left element
  found. If no non-left elements are found, the final left element is given a
  right margin to shift all children left.
*/

.modal > footer .left + :not(.left) { margin-left : auto; }
.modal > footer .left:last-child    { margin-right: auto; }

#image-edit-form {
  background: white;
  border-radius: 10px;
  padding: 1em;
  max-width: 500px;
}

#pages-welcome {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  color: #666;
}

#pages-welcome > * {
  max-width: 45rem;
}

#pages-welcome > h2 {
  display: block;
  text-align: center;
  padding: 2em;
  border: 3px #888 dashed;
  flex-grow: 0;
}

#content-modal {
  background:#0004;
  /*
  min-height: 100%;
  width: 100%;
  */

  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.pages {
  min-height: 100%;
  width: 100%;
}

@media print {
  /*
    For print media, hide the interface
  */

  :root {
    --controls-width: 0px;
  }

  body      {
    display: block;
    background: white;
  }


  .controls { display: none;  }
  .upload   { display: none;  }

  .scroll {
    max-height: unset;
    overflow-y: unset;
  }


  .pages > * > h2 {
    display: none;
  }
}
